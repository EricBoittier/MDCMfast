from pathlib import Path
from mdcmfast import INSTALL_DIR, determine_n_charges


# Configuration
configfile: "config.yaml"

# Define paths to executables
MTPFIT = f"{INSTALL_DIR}/src/mdcmfast/bin/mtpfit.py"
PCUBEFIT = f"{INSTALL_DIR}/src/mdcmfast/bin/pcubefit.x"
COMB_XYZ_TO_DCM = f"{INSTALL_DIR}/src/mdcmfast/bin/comb-xyz-to-dcm.pl"
CULL_CUBES = f"{INSTALL_DIR}/src/mdcmfast/bin/sparsify.pl"

name = config["name"]
atom_num = range(1, config["n_atoms"] + 1)
n_charges = range(config["n_atoms"], config["max_charges_per_atom"] + 1)
print(f"Charges per atom: {n_charges}")
n_charges_model = range(config["min_molecular_charges"], config["max_molecular_charges"] + 1)
print(f"Charges model: {n_charges_model}")

config["n_charges"] = n_charges
config["atom_num"] = atom_num


# Default target rule
rule all:
    input:
        expand(f"{INSTALL_DIR}/results/{{name}}/4-refined/{{name}}_{{n_charges_model}}charges_refined.xyz",
               name=config["name"],
               n_charges_model=range(config["min_molecular_charges"], 
                                   config["max_molecular_charges"] + 1))


# 1. Fit atomic multipoles to reference ESP
rule cull_cubes:
    input:
        pot_cube = config["ref_dir"] + "/{0}-pot.cube".format(config["name"]),
        dens_cube = config["ref_dir"] + "/{0}-dens.cube".format(config["name"])
    output:
        pot_cube = config["ref_dir"] + "/{0}-pot_culled.cube".format(config["name"]),
        dens_cube = config["ref_dir"] + "/{0}-dens_culled.cube".format(config["name"])
    shell:
        """
        {CULL_CUBES} {input.pot_cube} > {output.pot_cube}
        {CULL_CUBES} {input.dens_cube} > {output.dens_cube}
        """

# 1. Fit atomic multipoles to reference ESP
rule fit_multipoles:
    input:
        pot_cube = config["ref_dir"] + "/{0}-pot_culled.cube".format(config["name"]),
        dens_cube = config["ref_dir"] + "/{0}-dens_culled.cube".format(config["name"])
    output:
        mtpl = f"{INSTALL_DIR}/results/{config['name']}/1-mtp-fit/fitted-mtpl.dat"
    params:
        lmax = config["lmax"],
        qtot = config["qtot"],
        name = config["name"]
    shell:
        """
        mkdir -p $(dirname "{output.mtpl}")

        {MTPFIT} -pot {input.pot_cube} -dens {input.dens_cube} \
                  -lmax {params.lmax} -qtot {params.qtot} > {output.mtpl}.log
        echo "Fitted multipoles saved to {output.mtpl}"
        cp fitted-mtpl.dat {INSTALL_DIR}/results/{params.name}/1-mtp-fit/fitted-mtpl.dat
        """

# 2. Generate and analyze cube file from fitted multipoles
rule analyze_multipoles:
    input:
        pot_cube = config["ref_dir"] + "/{0}-pot_culled.cube".format(config["name"]),
        dens_cube = config["ref_dir"] + "/{0}-dens_culled.cube".format(config["name"]),
        mtpl = f"{INSTALL_DIR}/results/{config['name']}/1-mtp-fit/fitted-mtpl.dat"
    output:
        cube = f"{INSTALL_DIR}/results/{config['name']}/1-mtp-fit/ditriantapole_expansion.cube",
        log = f"{INSTALL_DIR}/results/{config['name']}/1-mtp-fit/analyze-cube.log"
    shell:
        """
        mkdir -p $(dirname "{output.cube}")

        # Generate cube from fitted multipoles
        {PCUBEFIT} -v -generate -multipole -esp {input.pot_cube} \
                   -dens {input.dens_cube} -mtpfile {input.mtpl}
        
        # Analyze fit quality
        {PCUBEFIT} -v -analysis -esp {input.pot_cube} \
                   -esp2 {output.cube} -dens {input.dens_cube} > {output.log}
        """

# 3. Fit atomic MDCM models
rule fit_atomic_mdcm:
    input:
        pot_cube = config["ref_dir"] + "/{0}-pot.cube".format(config["name"]),
        dens_cube = config["ref_dir"] + "/{0}-dens.cube".format(config["name"]),
        mtpl = f"{INSTALL_DIR}/results/{config['name']}/1-mtp-fit/fitted-mtpl.dat"
    output:
        xyz = f"{INSTALL_DIR}/results/{config['name']}/2-fit-atoms/multipole_atom{{atom_num}}_{{n_charges}}charges.xyz",
        log = f"{INSTALL_DIR}/results/{config['name']}/2-fit-atoms/multipole_atom{{atom_num}}_{{n_charges}}charges-fit.log"
    params:
        ntry = config["ntry"]
    shell:
        """
        mkdir -p $(dirname "{output.xyz}")
        
        {PCUBEFIT} -greedy -mtpfile {input.mtpl} \
                   -esp {input.pot_cube} -dens {input.dens_cube} \
                   -nacmin {wildcards.n_charges} -nacmax {wildcards.n_charges} \
                   -atom {wildcards.atom_num} -ntry {params.ntry} \
                   -onlymultipoles -v > {output.log}
        
        # Move output files to correct location
        mv "multipole{wildcards.atom_num}_{wildcards.n_charges}charges.xyz" "{output.xyz}"

        """

# 4. Fit molecular MDCM model
rule fit_molecular_mdcm:
    input:
        pot_cube = config["ref_dir"] + "/{0}-pot.cube".format(config["name"]),
        dens_cube = config["ref_dir"] + "/{0}-dens.cube".format(config["name"]),
        mtpl = f"{INSTALL_DIR}/results/{config['name']}/1-mtp-fit/fitted-mtpl.dat",
        atom_fits = expand(f"{INSTALL_DIR}/results/{config['name']}/2-fit-atoms/multipole_atom{{atom_num}}_{{n_charges}}charges.xyz",
                         atom_num=range(1, config["n_atoms"] + 1),
                         n_charges=config["n_charges"])
    output:
        xyz = f"{INSTALL_DIR}/results/{config['name']}/3-fit-molecule/{config['name']}_{{n_charges_model}}charges.xyz",
        log = f"{INSTALL_DIR}/results/{config['name']}/3-fit-molecule/{config['name']}_{{n_charges_model}}charges.log"
    params:
        ntry = config["ntry"],
        nacmax = config["max_charges_per_atom"]
    shell:
        """
        mkdir -p $(dirname "{output.xyz}")
        
        {PCUBEFIT} -greedy -esp {input.pot_cube} -dens {input.dens_cube} \
                   -mtpfile {input.mtpl} -ncmin {wildcards.n_charges_model} \
                   -ncmax {wildcards.n_charges_model} -nacmax {params.nacmax} \
                   -ntry {params.ntry} -v > {output.log}

        # Move output files to correct location
        mv "{wildcards.n_charges_model}charges.xyz" "{output.xyz}"
        """

# 5. Refine model with simplex
rule refine_model:
    input:
        xyz = f"{INSTALL_DIR}/results/{config['name']}/3-fit-molecule/{config['name']}_{{n_charges_model}}charges.xyz",
        pot_cube = config["ref_dir"] + "/{0}-pot.cube".format(config["name"]),
        dens_cube = config["ref_dir"] + "/{0}-dens.cube".format(config["name"]),
        mtpl = f"{INSTALL_DIR}/results/{config['name']}/1-mtp-fit/fitted-mtpl.dat"
    output:
        xyz = f"{INSTALL_DIR}/results/{config['name']}/4-refined/{config['name']}_{{n_charges_model}}charges_refined.xyz",
        log = f"{INSTALL_DIR}/results/{config['name']}/4-refined/{config['name']}_{{n_charges_model}}charges_refined.log"
    params:
        ntry = config["ntry"],
        nacmax = config["max_charges_per_atom"]
    shell:
        """
        mkdir -p $(dirname {output.xyz})
        
        {PCUBEFIT} -xyz {input.xyz} -mtpfile {input.mtpl} -simplex \
                   -esp {input.pot_cube} -dens {input.dens_cube} \
                   -nacmax {params.nacmax} -ntry {params.ntry} -v > {output.log}
        
        # Move refined output to correct location
        mv refined.xyz {output.xyz}
        """

# 6. Analyze final model
rule analyze_model:
    input:
        xyz = f"{INSTALL_DIR}/results/{config['name']}/3-fit-molecule/{config['name']}_{{n_charges}}charges_refined.xyz",
        pot_cube = config["ref_dir"] + "/{0}-pot.cube".format(config["name"]),
        dens_cube = config["ref_dir"] + "/{0}-dens.cube".format(config["name"])
    output:
        cube = f"{INSTALL_DIR}/results/{config['name']}/4-analysis/{config['name']}_{{n_charges}}charges.cube",
        log = f"{INSTALL_DIR}/results/{config['name']}/4-analysis/{config['name']}_{{n_charges}}charges.log"
    shell:
        """
        mkdir -p $(dirname {output.cube})

        # Generate cube from charge model
        {PCUBEFIT} -generate -xyz {input.xyz} -esp {input.pot_cube} \
                   -dens {input.dens_cube} -v
        
        # Analyze against reference
        {PCUBEFIT} -v -analysis -esp {input.pot_cube} \
                   -esp2 {output.cube} -dens {input.dens_cube} > {output.log}
        """

# 7. Generate CHARMM files
rule generate_charmm_files:
    input:
        xyz = f"{INSTALL_DIR}/results/{config['name']}/4-refined/{config['name']}_{{n_charges}}charges_refined.xyz",
        dens_cube = config["ref_dir"] + "/{0}-dens.cube".format(config["name"]),
        frames = "frames.txt"
    output:
        dcm = f"{INSTALL_DIR}/results/{config['name']}/charmm/{config['name']}_{{n_charges}}charges.dcm"
    shell:
        """ 
        mkdir -p $(dirname {output.dcm})
        {COMB_XYZ_TO_DCM} {input.xyz} {input.dens_cube} {input.frames} {output.dcm}
        """
